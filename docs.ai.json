[{"path":"package.json","description":"The package.json file contains metadata and configuration details for the \"vue-gpt-agents\" project, a Vue.js application with Electron integration. It includes scripts for serving, building, and linting the project, as well as dependencies such as Vue, Vuex, Vue Router, and Tailwind CSS. Additionally, it specifies development dependencies like Babel, ESLint, TypeScript, and Electron Builder.","size":2034},{"path":"public\\robots.txt","description":"The public\\robots.txt file is a simple text file that provides instructions to web crawlers, such as search engine bots, on how to access and index the content of a website. In this case, the file allows all user-agents (web crawlers) to access and index all parts of the website without any restrictions.","size":24},{"path":"README.md","description":"\"vue-gpt-agents is a Vue.js project that provides an easy setup for development and production environments, featuring hot-reloading, minification, linting, and customizable configurations.\"","size":326},{"path":"src\\api\\json.ts","description":"The src\\api\\json.ts file provides functions to manage agents and their messages using JSON files. It includes functions to add, delete, update agents, get agent list, add messages for an agent, and get messages of an agent.","size":1402},{"path":"src\\App.vue","description":"This file defines the main layout of the application, including the header, footer, and router view. It imports necessary components and retrieves agent data from an API. The styling ensures a full-height display.","size":862},{"path":"src\\background.ts","description":"This file sets up the Electron application's main process, creating a browser window and handling various application events such as window closing, activation, and readiness. It also installs Vue.js Devtools in development mode and handles graceful exit requests.","size":2592},{"path":"src\\components\\Agent.vue","description":"The Agent.vue component displays an autonomous agent's information, including its name, goal, and log messages. It also provides a button to run or stop the agent. The component utilizes the AutonomousAgent class and interacts with the JSON API for managing messages.","size":2196},{"path":"src\\components\\Agents.vue","description":"\"Agents.vue\" is a Vue.js component that displays a list of autonomous agents with their names and goals, and provides an interface for adding new agents to the list. It uses various sub-components such as List, InputText, and InputTextarea for handling user inputs and interactions.","size":2095},{"path":"src\\components\\partials\\Settings.vue","description":"The Settings.vue file is a Vue.js component that represents the settings section of an application. It includes a template for the settings layout, TypeScript script for handling data and logic, and scoped SCSS styling.","size":537},{"path":"src\\components\\partials\\TheFooter.vue","description":"TheFooter.vue is a Vue.js component that defines the structure, functionality, and styling of a footer section for a web application. It includes an empty div element with the class \"the-footer\" and uses TypeScript for scripting. The component has no props, components, or emits defined, but includes placeholders for data, computed properties, and methods. The styling is written in SCSS and scoped to this component.","size":539},{"path":"src\\components\\partials\\TheHeader.vue","description":"TheHeader.vue is a Vue.js component that defines the header section of a web application. It displays the current route's full path and has a gray background. The component is written in TypeScript and includes an empty props, components, data, computed, and methods objects for future customization.","size":580},{"path":"src\\main.ts","description":"The src\\main.ts file initializes the Vue application, imports necessary dependencies such as router, store, and electron shell, sets up event listeners for keydown events to toggle developer tools and reload the application, and mounts the app to the DOM.","size":501},{"path":"src\\models\\AutonomousAgent.ts","description":"The AutonomousAgent.ts file defines a class that represents an autonomous agent capable of executing tasks and interacting with the OpenAI API. The agent can run in guest mode or with a custom API key, and it manages its own loop for executing tasks, sending messages, and handling errors.","size":9358},{"path":"src\\router\\index.ts","description":"The src\\router\\index.ts file defines the routes for a Vue.js application, including the Home, Settings, and Agents pages, and sets up the router with web history.","size":584},{"path":"src\\services\\agent-service.ts","description":"The src/services/agent-service.ts file provides functions to interact with the OpenAI API for starting a goal agent, executing a task agent, and creating tasks agent. It also includes a mock agent service for testing purposes.","size":2988},{"path":"src\\store\\index.ts","description":"This file sets up the Vuex store for a Vue.js application, including its state, mutations, actions, and modules, by importing the createStore function from Vuex and exporting the created store instance.","size":139},{"path":"src\\types\\agentTypes.ts","description":"The file src\\types\\agentTypes.ts defines the structure and types for messages exchanged between agents in a system, using the zod library for validation and type inference.","size":251},{"path":"src\\types\\index.ts","description":"The src\\types\\index.ts file exports an Agent interface that defines the structure of an agent object, including its id, name, description, goal, and state properties.","size":165},{"path":"src\\utils\\constants.ts","description":"This file defines constants related to GPT models and default loop limits for free, paid, and custom API key users in the src/utils directory.","size":275},{"path":"src\\utils\\helpers.ts","description":"The src\\utils\\helpers.ts file contains utility functions to help with tasks such as checking if an array is of a specified type, extracting tasks from a given text, extracting arrays from input strings, and filtering out non-real tasks. These functions are useful for managing and manipulating task-related data in the application.","size":1885},{"path":"src\\utils\\interfaces.ts","description":"The file src\\utils\\interfaces.ts defines the RequestBody interface, which includes properties related to model settings, goals, tasks, and results for handling requests in a TypeScript application.","size":245},{"path":"src\\utils\\parsers.ts","description":"The file src\\utils\\parsers.ts contains parsers used by LangChain to prompt for specific formats and parse outputs. It includes actionParser for parsing actions like 'Question' or 'Respond', and tasksParser for parsing a list of tasks to complete.","size":771},{"path":"src\\utils\\prompts.ts","description":"The file src\\utils\\prompts.ts contains utility functions and templates for creating and executing prompts using the OpenAI API. It includes functions to create a model with custom settings, and prompt templates for starting a goal, executing a task, and creating new tasks based on the given objective and results.","size":2422},{"path":"src\\utils\\types.ts","description":"This file defines and exports the types ModelSettings and GuestSettings, which represent the configuration options for a custom AI model and guest user settings, respectively.","size":305},{"path":"src\\utils\\whitespace.ts","description":"The file src\\utils\\whitespace.ts contains utility functions for handling whitespace characters in strings, including a regex function to match whitespace characters and an isEmptyOrBlank function to check if a given string is empty or contains only whitespace characters.","size":297},{"path":"src\\views\\Home.vue","description":"The Home.vue file is a Vue.js component that serves as the main layout for the application. It consists of two sections: a sidebar displaying a list of agents and a settings link, and a main body containing an API key input field and an agent details component. The component imports and utilizes other components such as Agents, Agent, and InputApiKey to create its structure.","size":965},{"path":"src\\views\\Settings.vue","description":"The Settings.vue file is a Vue component that displays the settings page, including the Agents section and a link to the home page. It imports and uses the Settings component from '@/components/partials/Settings.vue'.","size":761},{"path":"src\\views","description":"Directory name: src\\views\n\nThe src\\views directory contains Vue.js components that serve as the main layouts for the application, including the Home and Settings pages. The Home.vue file provides a layout with a sidebar for agent navigation and an API key input field, while the Settings.vue file displays the settings page with an Agents section and a link to the home page. These components import and utilize other components to create their structure."},{"path":"src\\utils","description":"The src\\utils directory contains utility files for managing tasks, parsing data, handling requests, and working with GPT models in a TypeScript application. It includes files for defining constants, helper functions, interfaces, parsers, prompts, types, and whitespace handling."},{"path":"src\\types","description":"Directory: src\\types\n\nThe src\\types directory contains files that define the structure and types for agents and their messages in a system, using the zod library for validation and type inference. It includes agentTypes.ts for message structures and index.ts for agent object properties."},{"path":"src\\components\\partials","description":"The src\\components\\partials directory contains Vue.js components for various sections of a web application, such as the header, footer, and settings. These components include templates for layout, TypeScript scripts for handling data and logic, and scoped SCSS styling."},{"path":"src\\components","description":"Directory name: src\\components\n\nThe src\\components directory contains Vue.js components for managing and displaying autonomous agents and their information. It includes components for individual agent details, a list of agents, and various reusable partials for the web application's layout. The components interact with the JSON API and utilize classes to handle data and user interactions."},{"path":"src","description":"Directory name: src\n\nThe src directory serves as the main source code repository for a Vue.js and Electron-based application that manages autonomous agents and their interactions with the OpenAI API. It contains essential files for setting up the application, such as main.ts, background.ts, and App.vue, as well as subdirectories for organizing components, views, models, services, utilities, and types. The directory structure ensures efficient management of agents and their messages using JSON files while providing a user-friendly interface with customizable layouts and navigation."},{"path":".","description":"Directory name: vue-gpt-agents\n\nThe vue-gpt-agents directory contains the source code and configuration files for a Vue.js and Electron-based application that manages autonomous agents interacting with the OpenAI API. It includes essential files like package.json, public\\robots.txt, README.md, and a src folder containing the main application components, views, models, services, utilities, and types. The project features hot-reloading, minification, linting, customizable configurations, and an organized structure for efficient management of agents and their messages."}]